jobrnr-plugin(3) -- plugin API for Jobrnr
=========================================

## SYNOPSIS

The Jobrnr plugin API allows additional functionality to be added
without changing the core.

## DESCRIPTION

Plug-ins may respond to an event buy defining an event method.  If a plug-in does
not want to take action on a given event, it does not need to define the method
for the given event.

### EVENTS

  * `post_definition` <message>:
    Called after a job has been defined but before it has been added to the
    graph.

    <message> structure members: <br/>
    `definition` - the job definition object <br/>
    `options` - the Jobrnr options structure (see [COMMON MESSAGE OBJECTS][]) <br/>

  * `pre_instance` <message>:
    Called after a job instance has been created and before it has been logged
    or run.

    <message> structure members: <br/>
    `instance` - the job instance object <br/>
    `options` - the Jobrnr options structure (see [COMMON MESSAGE OBJECTS][]) <br/>

  * `post_instance` <message>:
    Called after a job instance has finished execution and after it has been
    logged.

    <message> structure members: <br/>
    `instance` - the job instance object <br/>
    `options` - the Jobrnr options structure (see [COMMON MESSAGE OBJECTS][]) <br/>

  * `post_interval` <message>:
    Called after a dispatch interval has completed.

    <message> structure members: <br/>
    `completed_instances` - array of job instances completed in this interval <br/>
    `scheduled_instances` - array of job instances that have been scheduled in this interval <br/>
    `stats` - statistics object <br/>
    `options` - the Jobrnr options structure (see [COMMON MESSAGE OBJECTS][]) <br/>

  * `post_application` <message>:
    Called before Jobrnr exits.

    <message> structure members: <br/>
    `status_code` - number of failed jobs <br/>
    `completed_instances` - array of job instances completed <br/>
    `stats` - statistics object <br/>
    `options` - the Jobrnr options structure (see [COMMON MESSAGE OBJECTS][]) <br/>

### COMMON MESSAGE OBJECTS

  * `options`:

    `output_directory`: absolute path to output directory <br/>
    `argv`: the contents of `ARGV` jobrnr was invoked with <br/>

  * `definition`:

    `command`: String or Proc that returns String to be executed by
    `system` <br/>
    `iterations`: Number of times the job should be executed <br/>
    `predecessors`: Job definitions that need to succeed before this job will
    be executed <br/>
    `successors`: Job definitions that will be executed after
    this job succeeds and any other predecessors succeed <br/>

  * `instance`:

    `definition`: the corresponding job definition for this job instance <br/>
    `slot`: the job slot occupied by this job instance <br/>
    `command`: String to be executed by `system` <br/>
    `iteration`: Indicates which iteration this job instance is <br/>
    `log`: Absolute path to log file <br/>
    `state`: one of `:pending`, `:dispatched`, `:finished` <br/>
    `success?`: only valid for `:finished` jobs <br/>
    `duration`: time in seconds for the instance to be executed <br/>

### TEMPLATE

```ruby
module Jobrnr::Plugin
  class <plugin-class-name>
    def post_definition(message); end
    def pre_instance(message); end
    def post_instance(message); end
    def post_interval(message); end
    def post_application(message); end
  end
end
```

## EXAMPLES

Log job definitions:

```ruby
module Jobrnr::Plugin
  class ExampleDefinitionLogger
    def post_definition(message)
      puts "JOB DEFINED: #{message.definition}"
    end
  end
end
```

Report failure summary:

```ruby
module Jobrnr::Plugin
  class FailureSummary
    def initialize
      @failures = []
    end

    def post_instance(message)
      @failures.push(message.instance) unless message.instance.success?
    end

    def post_application(message)
      return if @failures.empty?
      puts "FAILURES:"
      puts @failures.map(&:to_s).join("\n")
    end
  end
end
```

Write live status to a file:

```ruby
module Jobrnr::Plugin
  class StatusWriter
    def initialize
      @failures = []
    end

    def post_instance(message)
      @failures.push(message.instance) unless message.instance.success?
    end

    def post_interval(message)
      path = File.join(message.options.output_directory, 'status')
      File.open(path, 'w') do |file|
        file.write "#{message.stats.to_s}\n"
        
        unless @failures.empty?
          file.write "FAILURES:\n"
          file.write @failures.map(&:to_s).join("\n")
        end
      end
    end
  end
end
```

Incrementally `tar` results then `gzip` on `post_application`:

```ruby
module Jobrnr::Plugin
  class ResultAccumulator
    def post_instance(message)
      @archive_path ||= File.join(message.options.output_directory, 'results.tar')
      system("tar --append --file #{@archive_path} #{message.instance.log}")
    end

    def post_application(message)
      system("gzip #{@archive_path}")
    end
  end
end
```
